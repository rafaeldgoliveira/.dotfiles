[alias]
# strike
	# View abbreviated SHA, description, and history graph of the latest 20 commits.
	l = log --pretty=format:\"%C(magenta)%ad %C(yellow)%h | %C(green)[%<(15,trunc)%an] %C(white)%s %d\" --decorate --date=format:"%d-%m-%Y" --abbrev-commit -n 20
	lg = log --pretty=format:\"%C(magenta)%ad %C(yellow)%h | %C(green)[%<(15,trunc)%an] %C(white)%s %d\" --decorate --date=format:"%d-%m-%Y" --abbrev-commit -n 20 --graph

	# View the current working tree status using the short format.
	s = status -s

	# Push code to remote
	ps = "!git push origin $(git rev-parse --abbrev-ref HEAD)"

	# Pull in remote changes for the current repository and all its submodules.
	pl = "!git pull origin $(git rev-parse --abbrev-ref HEAD) --recurse-submodules"
	p = "pull"

	# Restore
	r = "!git restore"

	# Reset current branch
	rh = "!git reset --hard $(git rev-parse --abbrev-ref HEAD)"
	rs = "!git reset --soft $(git rev-parse --abbrev-ref HEAD)"

	# Show the diff between the latest commit and the current state.
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state.
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Clone a repository including all submodules.
	c = clone --recursive

	# Commit all changes.
	ac = !git add -A && git commit -m

	# Undo last commit
	uc = reset --soft HEAD~1

	# Show verbose output about tags, branches or remotes
	t = log --tags --no-walk --pretty=\"format:%C(magenta)%ad %C(yellow)%d %C(green)%an\" --decorate --date=format:"%d-%m-%Y"

	# Switch to a branch, creating it if necessary.
	go = "!f() { git checkout \"$1\" || git checkout -b \"$1\" 2> /dev/null; }; f"

	# Delete branch
	del = branch -D

	# Get branch name
	branch-name = "!git rev-parse --abbrev-ref HEAD"

	# Lista all branches
	ba = branch --format='%(color:magenta)%(committerdate:format:"%d-%m-%Y") %(HEAD)%(color:yellow)%(refname:short) %(color:white)%(subject) %(color:green)%(authorname)%(color:reset)' --sort=-committerdate --all

	# List local branches
	b = branch --format='%(color:magenta)%(committerdate:format:"%d-%m-%Y") %(HEAD)%(color:yellow)%(refname:short) %(color:white)%(subject) %(color:green)%(authorname)%(color:reset)' --sort=-committerdate

	# Delete the remote version of the current branch
	unpublish = "!git push origin :$(git branch-name)"

	# Delete a branch and recreate it from master
	recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"

	# Checkout branch
	co = checkout

	# Checkout our version of a file and add it
	ours = "!f() { git checkout --ours $@ && git add $@; }; f"
	# Checkout their version of a file and add it
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

	#List all remotes
	remotes = remote --verbose

	# List aliases.
	la = config --get-regexp alias

	# Amend the currently staged files to the latest commit.
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit.
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits.
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Abort rebase
	reba = "git rebase --abort"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Merge branches
	m = "merge --no-ff"

	# Merge abort
	ma = "merge --abort"

	# Remove branches that have already been merged with main.
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits.
	contributors = shortlog --summary --numbered

	# Show the user email for the current repository.
	whoami = config user.email

[apply]
	# Detect whitespace errors when applying a patch.
	whitespace = fix

[branch]
	# Show most recently changed branches first.
	sort = -committerdate

[core]
	autocrlf = false
  eol = lf
  pager = diff-so-fancy | less --tabs=2 -RFX
  editor = code --wait
	# Use custom `.gitignore` and `.gitattributes`.
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	# Make `git rebase` safer on macOS.
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false
	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[diff]
	tool = vscode
	# Detect copies as well as renames.
	renames = copies

[difftool "vscode"]
  cmd = code --wait --diff $LOCAL $REMOTE

[diff "bin"]
	# Use `hexdump` to diff binary files.
	textconv = hexdump -v -C

[help]
	# Automatically correct and execute mistyped commands.
	autocorrect = 1

[merge]
	tool = vscode
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[mergetool "vscode"]
  cmd = code --wait $MERGED

[push]
	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[pull]
	rebase = false

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

[init]
	defaultBranch = main

[user]
  email = rafadiego.gomes@gmail.com
  name = Rafael Diego Gomes de Oliveira

[credential]
	helper = store
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
